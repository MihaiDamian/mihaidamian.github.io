<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code Sushi]]></title>
  <link href="http://MihaiDamian.github.io/atom.xml" rel="self"/>
  <link href="http://MihaiDamian.github.io/"/>
  <updated>2014-03-25T20:49:29+02:00</updated>
  <id>http://MihaiDamian.github.io/</id>
  <author>
    <name><![CDATA[Mihai Damian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using UIViews as OpenGL Textures for Custom View Controller Transitions]]></title>
    <link href="http://MihaiDamian.github.io/blog/2013/05/uiview-as-opengl-texture/"/>
    <updated>2013-05-01T00:00:00+03:00</updated>
    <id>http://MihaiDamian.github.io/blog/2013/05/uiview-as-opengl-texture</id>
    <content type="html"><![CDATA[<p>In <a href="http://MihaiDamian.github.io/blog/2013/02/physics-uikit-2/">a previous post</a> I&rsquo;ve demonstrated how UIKit can be used with a physics engine. For this post I&rsquo;m going to continue on the topic of mixing UIKit with technologies from the field of game development and show how UIViews can be used as textures in OpenGL.</p>

<p>As a practical example I&rsquo;ve put together a sample app that simulates a <em>UINavigationController</em> where view controller transitions are animated using a cube instead of the standard slide animations. Go ahead and download the complete <a title="source code" href="https://github.com/MihaiDamian/Cube-transition-example" target="_blank">source code</a>. You can see it in action in the video below:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/ZOpnpLiykE4 "></iframe></div>


<p>Before we go any further I feel a disclaimer about the choice to use OpenGL in this example is needed. I have to admit it is entirely possible to construct simple 3D animations like this one using nothing but Core Animation &ndash; which being a higher level technology is easier to use. In fact <em>CATransition</em> already implements an undocumented &ldquo;cube&rdquo; animation identical with what I&rsquo;ve built here from scratch. The only purpose of this example is to present the steps and challenges you need to go through in order to transform UIViews into OpenGL textures.</p>

<h3>Drawing the view to an image</h3>


<p>The function that makes this entire exercise possible is <em>CALayer</em>&rsquo;s <em>renderInContext:</em> method. As the name suggests, this will draw a <em>CALayer</em> into a <em>CGContext</em>. By drawing into a <em>CGBitmapContext</em> (which is a subtype of <em>CGContext</em>). We can then grab the image data and pass it to OpenGL using the <em>glTexImage2D</em> function. One point to remember here is that neither Core Graphics nor OpenGL know anything about points &ndash; they only work in pixels. So whenever we transfer UIKit sizes and positions into Core Graphics or OpenGL we always need to take into account the content scale factor.</p>

<p>You&rsquo;ll find the code implementing all this in the <em>TextureAtlas</em> class. Notice the code there actually draws two views in a single texture. The input views will be the views of the view controllers involved in the transition. The reason why we render the views side by side in the same texture is that shaders (in our case thinly wrapped by <em>GLKBaseEffect</em>) normally draw a single texture in a draw call. In our case this trick simplifies the code a bit, but when rendering more complex scenes it also helps to improve performance if you manage to group up your drawing needs into fewer draw calls. This is because sending data to the graphics pipeline is usually the performance bottleneck and not the rendering itself which runs on optimized hardware.</p>

<p>Second think I want to point out here is the commented code I left in <em>TextureAtlas</em>. If you uncomment it you will see the texture saved as an image file in the application&rsquo;s Documents folder. If you open up the file you will see it&rsquo;s flipped on the y-axis. The happens because by default <em>CGContext</em>&rsquo;s coordinate system defines the origin point to be in the lower-left corner. That may come as some surprise if you used <em>CGContext</em> in other places like in <em>UIView&#8217;</em>s <em>drawRect:</em> where the y-axis is actually flipped for your convenience to match the coordinate system of UIKit. But as OpenGL uses the same coordinate system as Core Graphics, no extra handling is needed in our case.</p>

<h3>The right time to rasterize the views</h3>


<p>Let&rsquo;s take a look at the structure of the sample app. The root view controller is <em>NavigationController</em>, a custom view controller container that mimics the native <em>UINavigationController</em>. We have <em>AnimationViewController</em>, a wrapper for the transition animation that takes two views as parameters to kick off the animation. Also there are two dummy view controllers: <em>FirstViewController</em> and <em>SecondViewController</em>.</p>

<p><em>NavigationController</em> is initialized with an instance of <em>FirstViewController</em>, which immediately gets added as a child view controller to the navigation controller. Now let&rsquo;s say we need to present an instance of <em>SecondViewController</em>, using the <em>pushViewController:</em> method. What the navigation controller should do here is add the <em>SecondViewController</em> as a child so we can grab it&rsquo;s view for the animation, add an <em>AnimationViewController</em> as a child, remove the <em>FirstViewController</em>, wait for the animation to complete and finally remove the <em>AnimationViewController</em>.</p>

<p>This seems straightforward but there is one thing we need to take care of. Once the animation starts, the views from the animated controllers are rasterized to textures and no future updates to them will be visible until the animation is done. View layouts (either triggered by autolayout or autoresize masks) are performed on the main thread but asynchronously from view initialization. If we simply grab the view from the <em>SecondViewController</em> as soon as it&rsquo;s instantiated, we might end up with a view that&rsquo;s the wrong size. Instead we can use <em>UIViewController</em>&rsquo;s <em>transitionFromViewController:toViewController:duration:options:animations:completion:</em> method to get us out of this problem. We can leverage the fact that view layout is done by the time this method&rsquo;s animation block parameter gets called.</p>

<h3>Putting it all together</h3>


<p>Once we have the textures ready, what&rsquo;s left is the fairly standard task of creating an OpenGL scene for the animation. Namely we&rsquo;ll need to create a polygon mesh for a cube (complete with texture coordinates and surface normals for lighting), rotate the cube and call a delegate when the cube has completed 90 degrees of rotation. You can have a look at how this is implemented in the <em>Cube</em> and <em>AnimationViewController</em> classes. GLKit really helps simplify the effort here. It can take care of iOS specific things like setting up a UIView for OpenGL rendering, setting up an animation loop tied to the refresh rate of the device&rsquo;s screen or pausing the animation loop when the app goes into background. You can also use it for out of the box shaders and for linear algebra tasks common in 3D applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[StackOverflow Tag Popularity by Country]]></title>
    <link href="http://MihaiDamian.github.io/blog/2013/03/stackoverflow-tag-popularity-by-country/"/>
    <updated>2013-03-18T00:00:00+02:00</updated>
    <id>http://MihaiDamian.github.io/blog/2013/03/stackoverflow-tag-popularity-by-country</id>
    <content type="html"><![CDATA[<p>StackExchange provides a great little tool called <a href="http://data.stackexchange.com" title="Data Explorer" target="_blank">Data Explorer</a> that lets any user run readonly SQL queries on their Q&amp;A sites. I decided to put it to the <a href="http://data.stackexchange.com/stackoverflow/query/101591/originating-posting-locations-for-a-tag" title="test" target="_blank">test</a> and use it to find how many questions got posted from each country for a set of tags. The location information of each question author is declared voluntarily in freeform format. This means the data collected is pretty noisy, if available at all. To map the raw location to a canonical country name I used MapQuest&rsquo;s open <a href="http://open.mapquestapi.com/geocoding/" title="geocoder" target="_blank">geocoder</a> &ndash; one of few such services not placing  restrictions on the number of daily requests. Below is the resulting map showing the breakdown of questions by country and tag:</p>

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>


<script type='text/javascript'>
    jQuery(document).ready(function() {
        var map = jQuery('#map-frame');
        var newWidth = jQuery('#map-wrapper').width();
        var minDropdownMenuHeight = 455;
        var newHeight = Math.max(newWidth * (377.0 / 556), minDropdownMenuHeight);
        map.width(newWidth).height(newHeight);
    });
</script>


<div id="map-wrapper">
    <iframe id="map-frame" src="http://MihaiDamian.github.io/assets/2013-03-18-stackoverflow-tag-popularity-by-country/iFrame/index.html" style="border:0; width:100%; height:500px;" seamless></iframe>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Physics in a UIKit Based Application]]></title>
    <link href="http://MihaiDamian.github.io/blog/2013/02/physics-uikit-2/"/>
    <updated>2013-02-05T00:00:00+02:00</updated>
    <id>http://MihaiDamian.github.io/blog/2013/02/physics-uikit-2</id>
    <content type="html"><![CDATA[<p>Some of the popular game engines available on iOS like <a title="cocos2d" href="http://www.cocos2d-iphone.org" target="_blank">cocos2d</a> and <a title="Unity" href="http://unity3d.com" target="_blank">Unity</a> come bundled with physics engines so oftentimes the first thought when you want to add a bit of physics to your app is that you need to use one of the fancy game engines you&rsquo;ve been hearing so much about. In this post I&rsquo;ll walk you through using the <a title="Box2D" href="http://box2d.org" target="_blank">Box2D</a> physics engine without using any game engine or OpenGL.</p>

<p>Let&rsquo;s start with a simple example. Create a single view iPad application project:</p>

<p><img src="http://MihaiDamian.github.io/assets/2013-02-05-physics-uikit-2/images/singleviewapp.png" alt="" />
<img src="http://MihaiDamian.github.io/assets/2013-02-05-physics-uikit-2/images/ipadapp.png" alt="" /></p>

<p>Next we need to setup Box2D. The easiest way to do this is via <a title="CocoaPods" href="http://cocoapods.org" target="_blank">CocoaPods</a>. CocoaPods greatly simplifies library dependency management for iOS and OS X projects. If you haven&rsquo;t used it before you need to run the following commands in the terminal to set it up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="o">[</span>sudo<span class="o">]</span> gem install cocoapods
</span><span class='line'><span class="nv">$ </span>pod setup
</span></code></pre></td></tr></table></div></figure>


<p>Library dependencies are declared in a text file named Podfile which needs to be placed in the same directory as your xcodeproj file. Create the file and paste in the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">platform</span> <span class="ss">:ios</span>
</span><span class='line'><span class="n">pod</span> <span class="s1">&#39;box2d&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.3&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This declares you are targeting iOS and want to use the Box2D library using either version 2.3 or any other minor version up to 2.4 but not including 2.4. If you&rsquo;re new to CocoaPods I encourage you to read about the other <a title="dependency declaration options" href="https://github.com/CocoaPods/CocoaPods/wiki/Dependency-declaration-options" target="_blank">dependency declaration options</a> available.</p>

<p>Final step, point your terminal to your Xcode project&rsquo;s folder and run</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pod install
</span></code></pre></td></tr></table></div></figure>


<p>This command will download the Box2D library and in addition create an Xcode workspace that contains your initial project file and a new Pods project where all your dependencies reside. From this point on you should always use the generated workspace instead of the initial project and you&rsquo;ll be good to go.</p>

<p>Let&rsquo;s move on to the good stuff and lay out some core Box2D concepts we&rsquo;ll be using in this tutorial. Box2D simulates interaction between rigid <em>bodies</em>. Bodies have a position and a set of <em>fixtures</em>. Each fixture links a body with a <em>shape</em> and a few physical properties like mass, friction and &ldquo;bounciness&rdquo;. All bodies are of course part of a <em>world</em> and you could even have multiple worlds if you&rsquo;d so desire. There are a host of other features available in Box2D that I won&rsquo;t be covering in this tutorial. Have a look over the excellent Box2D <a title="Box2D manual" href="http://box2d.org/manual.pdf" target="_blank">manual</a> to see what else is available.</p>

<p>Now the great part about Box2D is that it&rsquo;s completely display agnostic. Its only job is to keep track of your bodies and ensure that everything interacts realistically. This also means it knows nothing of pixels, points or anything like that. Box2D simulates the &ldquo;real world&rdquo; and it&rsquo;s units of measurement are miles, kilograms and seconds. It&rsquo;s up to you to convert UIKit&rsquo;s point based coordinates into something Box2D can handle. There&rsquo;s a catch though: simulating physics on objects of arbitrary size is computationally intensive. To keep things simple Box2D is optimised to handle moving objects of sizes between 0.1 and 10 meters. So considering points and meters equal will not work out very well. Instead we&rsquo;ll use an arbitrary scaling factor to keep bodies within reasonable size.</p>

<p>Let&rsquo;s start by declaring a few functions for converting between points to meters and back:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="n">CGFloat</span> <span class="n">kPointsToMeterRatio</span> <span class="o">=</span> <span class="mf">32.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">float32</span> <span class="nf">PointsToMeters</span><span class="p">(</span><span class="n">CGFloat</span> <span class="n">points</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">points</span> <span class="o">/</span> <span class="n">kPointsToMeterRatio</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGFloat</span> <span class="nf">MetersToPoints</span><span class="p">(</span><span class="n">float32</span> <span class="n">meters</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">meters</span> <span class="o">*</span> <span class="n">kPointsToMeterRatio</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">b2Vec2</span> <span class="nf">CGPointTob2Vec2</span><span class="p">(</span><span class="n">CGPoint</span> <span class="n">point</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">float32</span> <span class="n">x</span> <span class="o">=</span> <span class="n">PointsToMeters</span><span class="p">(</span><span class="n">point</span><span class="p">.</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="n">float32</span> <span class="n">y</span> <span class="o">=</span> <span class="n">PointsToMeters</span><span class="p">(</span><span class="n">point</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">b2Vec2</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGPoint</span> <span class="nf">b2Vec2ToCGPoint</span><span class="p">(</span><span class="n">b2Vec2</span> <span class="n">vector</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">x</span> <span class="o">=</span> <span class="n">MetersToPoints</span><span class="p">(</span><span class="n">vector</span><span class="p">.</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">y</span> <span class="o">=</span> <span class="n">MetersToPoints</span><span class="p">(</span><span class="n">vector</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I also included here two convenience functions for converting between CGPoints and Box2D vectors and back.</p>

<p>Next, open up ViewController.m and replace its contents with the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;World.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &lt;QuartzCore/QuartzCore.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">World</span> <span class="o">*</span><span class="n">_world</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_world</span> <span class="o">=</span> <span class="p">[[</span><span class="n">World</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">generateCircles</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">generateCircles</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CGSize</span> <span class="n">viewSize</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">radius</span> <span class="o">=</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>    <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">UIView</span> <span class="o">*</span><span class="n">circleView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">viewSize</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">radius</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">radius</span><span class="p">,</span>
</span><span class='line'>                                                                      <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">viewSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">radius</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">radius</span><span class="p">,</span>
</span><span class='line'>                                                                      <span class="n">radius</span><span class="p">,</span> <span class="n">radius</span><span class="p">)];</span>
</span><span class='line'>        <span class="n">circleView</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">];</span>
</span><span class='line'>        <span class="n">circleView</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview:</span><span class="n">circleView</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_world</span> <span class="nl">addCircleWithView:</span><span class="n">circleView</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The view controller starts by initializing a world object that will handle the interaction with Box2D. The world object is initialized with a frame covering the entire screen. We then create 20 views at random positions on the screen and give them a corner radius to make them look like circles. Finally we pass them to the world object.</p>

<p>Now create a new class called World, do a #import &lt;box2d/Box2D.h&gt; at the top of World.m and add the following ivars to World in the implementation file (which at this point needs to be renamed to World.mm to work with Box2D which is a C++ library):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">b2World</span> <span class="o">*</span><span class="n">_world</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">_circles</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t worry right now about what these objects represent &ndash; I&rsquo;ll talk again about them in the next bits of code. If you never mixed Objective-C and C++ code before, remember that it&rsquo;s always worth isolating C++ code and imports of C++/Objective-C++ files in implementation files. This saves you the trouble of renaming .m files to .mm when you import your mixed language code and keeps your compile time as low as possible since Objective-C code compiles faster than Objective-C++ code.</p>

<p>Moving on, declare an initialization method <em>initWithFrame</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">frame</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">self</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">b2Vec2</span> <span class="n">gravity</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">,</span> <span class="mf">10.0f</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_world</span> <span class="o">=</span> <span class="n">new</span> <span class="n">b2World</span><span class="p">(</span><span class="n">gravity</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_circles</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">createScreenBoundsForFrame:</span><span class="n">frame</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">setupAnimationLoop</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code will setup a Box2D world object with gravity defined to be pointing upwards on the Y axis &ndash; meaning objects will appear to be falling from the top to the bottom of our screen. <em>_circle</em> is an array we&rsquo;ll use to keep track of all the bodies we&rsquo;ll be adding to our world. Next we&rsquo;ll create the invisible borders of our screen in <em>createScreenBoundsForFrame:</em> to keep the views from falling off from the screen and finally setup an animation loop to drive everything in <em>setupAniamtionLoop</em>. Here&rsquo;s the code for <em>createScreenBoundsForFrame</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">createScreenBoundsForFrame:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">frame</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">b2BodyDef</span> <span class="n">screenBoundsDef</span><span class="p">;</span>
</span><span class='line'>    <span class="n">screenBoundsDef</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">Set</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">);</span>
</span><span class='line'>    <span class="n">b2Body</span> <span class="o">*</span><span class="n">screenBounds</span> <span class="o">=</span> <span class="n">_world</span><span class="o">-&gt;</span><span class="n">CreateBody</span><span class="p">(</span><span class="o">&amp;</span><span class="n">screenBoundsDef</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">b2Vec2</span> <span class="n">worldEdges</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">worldEdges</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">b2Vec2</span><span class="p">(</span><span class="n">CGPointTob2Vec2</span><span class="p">(</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">));</span>
</span><span class='line'>    <span class="n">worldEdges</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">b2Vec2</span><span class="p">(</span><span class="n">CGPointTob2Vec2</span><span class="p">(</span><span class="n">CGPointMake</span><span class="p">(</span><span class="n">CGRectGetMinX</span><span class="p">(</span><span class="n">frame</span><span class="p">),</span> <span class="n">CGRectGetMaxY</span><span class="p">(</span><span class="n">frame</span><span class="p">))));</span>
</span><span class='line'>    <span class="n">worldEdges</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">b2Vec2</span><span class="p">(</span><span class="n">CGPointTob2Vec2</span><span class="p">(</span><span class="n">CGPointMake</span><span class="p">(</span><span class="n">CGRectGetMaxX</span><span class="p">(</span><span class="n">frame</span><span class="p">),</span> <span class="n">CGRectGetMaxY</span><span class="p">(</span><span class="n">frame</span><span class="p">))));</span>
</span><span class='line'>    <span class="n">worldEdges</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">b2Vec2</span><span class="p">(</span><span class="n">CGPointTob2Vec2</span><span class="p">(</span><span class="n">CGPointMake</span><span class="p">(</span><span class="n">CGRectGetMaxX</span><span class="p">(</span><span class="n">frame</span><span class="p">),</span> <span class="n">CGRectGetMinY</span><span class="p">(</span><span class="n">frame</span><span class="p">))));</span>
</span><span class='line'>    <span class="n">worldEdges</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">b2Vec2</span><span class="p">(</span><span class="n">CGPointTob2Vec2</span><span class="p">(</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">b2ChainShape</span> <span class="n">worldShape</span><span class="p">;</span>
</span><span class='line'>    <span class="n">worldShape</span><span class="p">.</span><span class="n">CreateChain</span><span class="p">(</span><span class="n">worldEdges</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="n">screenBounds</span><span class="o">-&gt;</span><span class="n">CreateFixture</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">worldShape</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here you can see a <em>screenBounds</em> body object being created. Bodies are always instantiated using the Box2D world object that will also keep track and memory manage them. Also notice how the body is created from a body definition object. This allows multiple bodies to be instantiated using the same defining properties. Next we create a chain shape that spans the left, bottom, right and upper edge of the input frame. This is a special type of shape that doesn&rsquo;t have a width and is used mostly for defining boundaries. Finally the shape is bounded to the body using a fixture.</p>

<p>Before looking at the animation loop let&rsquo;s introduce the function that will map UIViews to Box2D bodies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addCircleWithView:</span><span class="p">(</span><span class="n">UIView</span><span class="o">*</span><span class="p">)</span><span class="nv">view</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSAssert</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">superview</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">,</span> <span class="s">@&quot;The view parameter is not part of a view hierarchy&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">b2BodyDef</span> <span class="n">bodyDef</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bodyDef</span><span class="p">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">b2_dynamicBody</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bodyDef</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">CGPointTob2Vec2</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">center</span><span class="p">);</span>
</span><span class='line'>    <span class="n">b2Body</span> <span class="o">*</span><span class="n">circle</span> <span class="o">=</span> <span class="n">_world</span><span class="o">-&gt;</span><span class="n">CreateBody</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bodyDef</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">b2CircleShape</span> <span class="n">shape</span><span class="p">;</span>
</span><span class='line'>    <span class="n">shape</span><span class="p">.</span><span class="n">m_radius</span> <span class="o">=</span> <span class="n">PointsToMeters</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">b2FixtureDef</span> <span class="n">fixtureDef</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fixtureDef</span><span class="p">.</span><span class="n">shape</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">shape</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fixtureDef</span><span class="p">.</span><span class="n">density</span> <span class="o">=</span> <span class="mf">1.0f</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fixtureDef</span><span class="p">.</span><span class="n">friction</span> <span class="o">=</span> <span class="mf">0.3f</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fixtureDef</span><span class="p">.</span><span class="n">restitution</span> <span class="o">=</span> <span class="mf">0.8f</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">circle</span><span class="o">-&gt;</span><span class="n">CreateFixture</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fixtureDef</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Associate the body with the passed in view</span>
</span><span class='line'>    <span class="n">circle</span><span class="o">-&gt;</span><span class="n">SetUserData</span><span class="p">((</span><span class="n">__bridge</span> <span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">view</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">_circles</span> <span class="nl">addObject:</span><span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithPointer:</span><span class="n">circle</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we create a body with the same position as the view, we add it a circle shape that matches the size of the view and a few physical properties. Later on we&rsquo;ll need to know what view each body represents so we save the pointer to the view in the body&rsquo;s user data field.</p>

<p>Let&rsquo;s move on to setting up the animation loop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setupAnimationLoop</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CADisplayLink</span> <span class="o">*</span><span class="n">displayLink</span> <span class="o">=</span> <span class="p">[</span><span class="n">CADisplayLink</span> <span class="nl">displayLinkWithTarget:</span><span class="n">self</span> <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">animationLoop:</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">displayLink</span> <span class="nl">addToRunLoop:</span><span class="p">[</span><span class="n">NSRunLoop</span> <span class="n">mainRunLoop</span><span class="p">]</span> <span class="nl">forMode:</span><span class="n">NSDefaultRunLoopMode</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">animationLoop:</span><span class="p">(</span><span class="n">CADisplayLink</span><span class="o">*</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CFTimeInterval</span> <span class="n">timeDelta</span> <span class="o">=</span> <span class="n">sender</span><span class="p">.</span><span class="n">duration</span> <span class="o">*</span> <span class="n">sender</span><span class="p">.</span><span class="n">frameInterval</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">int32</span> <span class="n">velocityIterations</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
</span><span class='line'>    <span class="n">int32</span> <span class="n">positionIterations</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_world</span><span class="o">-&gt;</span><span class="n">Step</span><span class="p">(</span><span class="n">timeDelta</span><span class="p">,</span> <span class="n">velocityIterations</span><span class="p">,</span> <span class="n">positionIterations</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Adjust position for all views associated with circle bodies</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">NSValue</span> <span class="o">*</span><span class="n">circleWrapper</span> <span class="k">in</span> <span class="n">_circles</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">b2Body</span> <span class="o">*</span><span class="n">circle</span> <span class="o">=</span> <span class="p">(</span><span class="n">b2Body</span><span class="o">*</span><span class="p">)[</span><span class="n">circleWrapper</span> <span class="n">pointerValue</span><span class="p">];</span>
</span><span class='line'>        <span class="n">UIView</span> <span class="o">*</span><span class="n">view</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">UIView</span><span class="o">*</span><span class="p">)</span><span class="n">circle</span><span class="o">-&gt;</span><span class="n">GetUserData</span><span class="p">();</span>
</span><span class='line'>        <span class="n">view</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="n">b2Vec2ToCGPoint</span><span class="p">(</span><span class="n">circle</span><span class="o">-&gt;</span><span class="n">GetPosition</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Animations are always computed in discreet time intervals called <em>frames</em>. Animations get more accurate as frames get shorter but since the amount of time required to compute a frame stays relatively constant you take a performance hit when animating in shorter frames. Displays however operate on a fixed frame rate. In the code above, <em>animationLoop:</em> is in charge of animating and drawing a frame on the screen. CADisplayLink is in charge of deciding when the screen is ready to draw something new and will call <em>animationLoop:</em> to do the drawing. It&rsquo;s entirely possible that <em>animationLoop:</em> would require more time to execute than a single screen refresh cycle, but what CADisplayLink ensures is that your animations stay as smooth as possible with the available resources and that no animation frames are being computed if the display is not ready to show them.</p>

<p>Let&rsquo;s look at <em>animationLoop:</em> in more detail. First thing it does is figure out how much time has passed since the last run and passes that info to our world object which will then proceed to update its internal state. There are two extra parameters there: <em>velocityIterations</em> and <em>positionIterations</em>. These have more to do with Box2D&rsquo;s inner workings. What happens is that Box2D approximates body velocity and position in multiple iterations. The more iterations you attempt, the more realistic the outcome. You can fine tune these values until you find something acceptable in terms of performance and realism.</p>

<p>Once Box2D does its thing, all we need to do is iterate over all circle bodies and update the position of their associated UIView to match the bodies&#8217; new positions.</p>

<p>Finally, we need to take care of the cleanup. The only C++ object we allocated ourselves is the world object. Everything else was allocated internally by Box2D and will be cleaned up once the world object is destroyed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dealloc</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">delete</span> <span class="n">_world</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it! If you followed all the steps you should end up with something like this:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/dxox7uz4Sas "></iframe></div>


<p>You can grab the full code for this tutorial from here: <a title="https://github.com/MihaiDamian/Box2DTutorial" href="https://github.com/MihaiDamian/Box2DTutorial" target="_blank"><a href="https://github.com/MihaiDamian/Box2DTutorial">https://github.com/MihaiDamian/Box2DTutorial</a></a></p>

<p>So there you have it. Physics engines can be used very easily in a UIKit based app. In fact you could even go and build a game like <a title="Hundreds on iTunes" href="https://itunes.apple.com/us/app/hundreds/id493536432?mt=8" target="_blank">Hundreds</a> using nothing but UIKit and Box2D.</p>
]]></content>
  </entry>
  
</feed>
